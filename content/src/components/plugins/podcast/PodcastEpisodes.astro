---
import type { GetStaticPathsResult, InferGetStaticPropsType } from "astro"
import StarlightPage from "@astrojs/starlight/components/StarlightPage.astro"
import { Icon, LinkButton } from "@astrojs/starlight/components"
import type { StarlightPageProps } from "@astrojs/starlight/props"
import { YouTube } from "@astro-community/astro-embed-youtube"
import ApplePodcastsIcon from "@/components/icons/ApplePodcastsIcon.astro"
import SpotifyIcon from "@/components/icons/SpotifyIcon.astro"
import YouTubeIcon from "@/components/icons/YouTubeIcon.astro"
import { getPodcastEntries } from "@/lib/content/podcast"

export const prerender = true

export async function getStaticPaths() {
  const entries = await getPodcastEntries()
  const episodes = entries.sort((a, b) => b.data.episode - a.data.episode)
  return [
    {
      params: {
        prefix: "podcast"
      },
      props: {
        episodes
      }
    }
  ] satisfies GetStaticPathsResult
}

type Props = InferGetStaticPropsType<typeof getStaticPaths>

const { episodes } = Astro.props

const pageProps: StarlightPageProps = {
  frontmatter: {
    title: "Cause & Effect Podcast",
    tableOfContents: false,
    template: "splash",
  },
  hasSidebar: false,
}

const providerLinks = [
  {
    label: "Spotify",
    icon: SpotifyIcon,
    href: "https://open.spotify.com/show/4QTFiem4o0G9V2vXtv8vMU",
    class: "text-emerald-700 dark:text-emerald-400 border-emerald-700 dark:border-emerald-400"
  },
  {
    label: "Apple Podcasts",
    icon: ApplePodcastsIcon,
    href: "https://podcasts.apple.com/us/podcast/cause-effect/id1781879869",
    class: "text-violet-700 dark:text-violet-400 border-violet-700 dark:border-violet-400"
  },
  {
    label: "YouTube",
    icon: YouTubeIcon,
    href: "https://youtube.com/playlist?list=PLDf3uQLaK2B_jaZ5Fy7IPNq0FIViV_CQl&si=ON5wSnTE5stFfeNM",
    class: "text-red-700 dark:text-red-400 border-red-700 dark:border-red-400"
  },
] as const

function formatSeconds(seconds: number): string {
  const minutes = Math.floor(seconds / 60);
  const secs = seconds % 60;
  return `${String(minutes).padStart(2, "0")}:${String(secs).padStart(2, "0")}`;
}
---

<StarlightPage {...pageProps}>
  <main class="not-content" data-pagefind-ignore>
    <div class="container mx-auto py-6 md:py-12 px-4 sm:px-6 lg:px-8">
      {/* Hero Section */}
      <div class="flex items-start justify-between mb-8">
        <div>
          <h1 class="mb-2 text-3xl text-[--sl-color-white] font-bold">Latest Episodes</h1>
          <p class="mb-3 text-xl">
            Explore all episodes of the Cause &amp; Effect podcast!
          </p>
          <a
            href="/podcast/rss.xml"
            class="inline-flex items-center justify-center gap-2 px-4 py-1 border border-[--sl-color-white] text-[--sl-color-white] font-semibold rounded-full bg-[var(--sl-color-bg)] dark:bg-[var(--sl-color-bg-nav)] hover:bg-[var(--sl-color-text-accent)] hover:text-[var(--sl-color-black)] transition-colors no-underline"
          >
            <Icon name="rss" />
            <span>RSS Feed</span>
          </a>
        </div>
        <div class="hidden md:flex flex-col gap-2">
          {providerLinks.map(({ href, label, icon: ProviderIcon, ...props }) => (
            <a 
              href={href}
              target="_blank"
              rel="noopener noreferrer"
              class:list={["flex items-center justify-center gap-2 px-4 py-1 bg-[--sl-color-bg] dark:bg-[--sl-color-bg-nav] hover:bg-[--sl-color-text-accent] hover:text-[--sl-color-black] text-[--sl-color-white] font-semibold border hover:border-[--sl-color-text-accent] rounded-full no-underline cursor-pointer transition-colors", props.class]}
            >
              <ProviderIcon class="h-6" />
              <span>{label}</span>
            </a>
          ))}
        </div>
      </div>

      {/* Episode List */}
      <div class="space-y-8">
        {episodes.map((episode) => {
          const episodeNumber = `#${episode.data.episode}`
          const podcastUrl = `/podcast/episodes/${episode.slug.replace("podcast/", "")}/`
          const date = episode.data.publicationDate.toLocaleDateString(undefined, { 
            dateStyle: "medium"
          })
          return (
            <article class="flex gap-6 p-4 rounded-lg border border-[--sl-color-gray-5]">
              <div class="w-full md:w-64 lg:w-80 md:h-full rounded-lg shrink-0 overflow-hidden aspect-video md:aspect-auto">
                <YouTube id={episode.data.youtube.id} title={episode.data.youtube.title} />
              </div>
              <div class="min-w-0 flex-1 flex flex-col justify-between">
                <h2 class="mb-1 text-xl text-[--sl-color-white] font-semibold line-clamp-1">
                  <a href={podcastUrl} class="no-underline hover:underline">
                    {episodeNumber}&colon; {episode.data.title}
                  </a>
                </h2>
                <p class="max-w-3xl mb-2 line-clamp-3">
                  {episode.data.description}
                </p>
                <div class="flex gap-4 text-sm line-clamp-1">
                  <time datetime={date}>{date}</time>
                  <span>•</span>
                  <span>{formatSeconds(episode.data.duration)}</span>
                  <span>•</span>
                  <span>Episode {episodeNumber}</span>
                </div>
              </div>
              <div class="hidden sm:block shrink-0">
                <LinkButton
                  href={podcastUrl}
                  icon="right-arrow"
                  iconPlacement="end"
                  class="gap-0 !m-0 p-0 !bg-transparent !text-[--sl-color-text-accent] font-semibold !border-none rounded-lg"
                >
                  Episode Notes
                </LinkButton>
              </div>
            </article>
          )
        })}
      </div>
    </div>
  </main> 
</StarlightPage>

<style>
:global(.content-panel:first-of-type) {
  display: none;
}

:global(.content-panel) {
  border-top: none !important;
  padding: 0;
}

:global(.sl-container) {
  max-width: unset;
  margin: unset;
  margin-inline: unset;
}
</style>
